import telebot
import os

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "7955555844:AAFFcsqeQ6-W0kyKKNtJNPdmvm4xmoVMWNY"

# –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_ADMIN_ID –Ω–∞ ID –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞
ADMIN_ID = 6646133212

bot = telebot.TeleBot(BOT_TOKEN)
triggers = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ {chat_id: {trigger_word: reply_message_id}}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
def save_triggers():
    with open("triggers.txt", "w") as f:
        for chat_id, chat_triggers in triggers.items():
            for trigger, reply_id in chat_triggers.items():
                f.write(f"{chat_id}:{trigger}:{reply_id}\n")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_triggers():
    if not os.path.exists("triggers.txt"):
        return {}
    with open("triggers.txt", "r") as f:
        for line in f:
            try:
                parts = line.strip().split(":", 2)
                if len(parts) == 3:
                    chat_id, trigger, reply_id = parts
                    chat_id = int(chat_id)
                    if chat_id not in triggers:
                        triggers[chat_id] = {}
                    triggers[chat_id][trigger] = int(reply_id)
                else:
                    print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ triggers.txt: {line.strip()}")
            except ValueError as e:
                print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏: {line.strip()}, –æ—à–∏–±–∫–∞: {e}")
    return triggers

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
triggers = load_triggers()

def is_admin(user_id):
    return user_id == ADMIN_ID

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä, —è –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —á–∞—Ç–∞\nt.me/madimods_chat")

@bot.message_handler(commands=['help'])
def send_help(message):
    chat_id = message.chat.id
    help_message = "—Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:\n"
    if chat_id in triggers and triggers[chat_id]:
      for trigger in triggers[chat_id]:
        help_message+= f"- {trigger}\n"
    else:
      help_message += "–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤."
    bot.reply_to(message, help_message)


@bot.message_handler(commands=['trg'])
def handle_trigger_command(message):
    if not is_admin(message.from_user.id):
      bot.reply_to(message, "—É –≤–∞—Å –Ω–∫—Ç –ø—Ä–∞–≤ –¥–ª—è  –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
      return

    if not message.reply_to_message:
        bot.reply_to(message, "—Å–¥–µ–ª–∞—Ü —Ä–µ–ø–ª–∞–π–Ω –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á–æ –Ω–∏–±—É–¥—å –ø–æ—á–ª–µ –∫–æ–º–∞–Ω–¥—ã /trg")
        return

    if not message.text or len(message.text.split()) < 2:
      bot.reply_to(message, "—Å–¥–µ–ª–∞—Ü —Ä–µ–ø–ª–∞–π–Ω –Ω–∞ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —á–æ –Ω–∏–±—É–¥—å –ø–æ—á–ª–µ –∫–æ–º–∞–Ω–¥—ã /trg")
      return
      
    trigger_text = message.text.split(maxsplit=1)[1].strip()
    chat_id = message.chat.id
    reply_message_id = message.reply_to_message.message_id

    if chat_id not in triggers:
      triggers[chat_id] = {}

    triggers[chat_id][trigger_text] = reply_message_id

    save_triggers()
    bot.reply_to(message, f"—Ç—Ä–∏–≥–≥–µ—Ä '{trigger_text}' —Å–æ–∑–¥–∞–Ω")

@bot.message_handler(commands=['del'])
def handle_delete_trigger(message):
    if not is_admin(message.from_user.id):
      bot.reply_to(message, "—É –≤–∞—Å –Ω–∫—Ç –ø—Ä–∞–≤ –¥–ª—è  –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
      return

    if not message.text or len(message.text.split()) < 2:
        bot.reply_to(message, "—É–∫–∞–∂–∏ —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /del")
        return

    trigger_to_delete = message.text.split(maxsplit=1)[1].strip()
    chat_id = message.chat.id

    if chat_id in triggers and trigger_to_delete in triggers[chat_id]:
        del triggers[chat_id][trigger_to_delete]
        save_triggers()
        bot.reply_to(message, f"—Ç—Ä–∏–≥–≥–µ—Ä '{trigger_to_delete}' —É–¥–∞–ª–µ–Ω")
    else:
        bot.reply_to(message, "")

@bot.message_handler(content_types=['new_chat_members'])
def handle_new_member(message):
    for new_member in message.new_chat_members:
        if new_member.id == bot.get_me().id:
            bot.send_message(message.chat.id, "üëã")
            bot.send_message(message.chat.id, "–ü–∏—à–∏ /help —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã")


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_message(message):
  chat_id = message.chat.id
  if chat_id in triggers:
    for trigger_text, reply_message_id in triggers[chat_id].items():
       if trigger_text.lower() in message.text.lower():
          try:
            bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=reply_message_id)
          except:
            bot.reply_to(message, "—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
          return

bot.polling(none_stop=True)